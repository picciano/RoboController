//
//  RoboControllerStyleKit.swift
//  RoboController
//
//  Created by Oscar Picciano on 1/15/17.
//  Copyright Â© 2017 Picciano. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class RoboControllerStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawControllerButton(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 40, height: 24), resizing: ResizingBehavior = .aspectFit, labelText: String = "A", on: Bool = true) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 40, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 24)


        //// Color Declarations
        let red = NSColor(calibratedRed: 1, green: 0, blue: 0, alpha: 1)
        let green = NSColor(calibratedRed: 0, green: 0.652, blue: 0, alpha: 1)
        let blue = NSColor(calibratedRed: 0, green: 0, blue: 1, alpha: 1)
        let yellow = NSColor(calibratedRed: 1, green: 1, blue: 0, alpha: 1)

        //// Variable Declarations
        let calculatedColor: NSColor = labelText == "A" ? red : (labelText == "B" ? green : (labelText == "Y" ? blue : yellow))

        //// Oval 2 Drawing
        let oval2Path = NSBezierPath(ovalIn: NSRect(x: 4, y: 4, width: 16, height: 16))
        NSColor.black.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        if (on) {
            //// Oval Drawing
            let ovalPath = NSBezierPath(ovalIn: NSRect(x: 6, y: 6, width: 12, height: 12))
            calculatedColor.setFill()
            ovalPath.fill()
        }


        //// Text Drawing
        let textRect = NSRect(x: 24, y: 0, width: 16, height: 24)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.systemFont(ofSize: 17), NSForegroundColorAttributeName: NSColor.black, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = labelText.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        labelText.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
